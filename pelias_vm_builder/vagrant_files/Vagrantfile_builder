# -*- mode: ruby -*-
# vi: set ft=ruby :

# This vagrant file is meant for building a pelias VM
# The VM run using that file will
# - initialize pelias services
# - download all the data for a planet setup
# - index all the data for a planet setup
# - start the REST API available on port 4000
Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"
  config.vm.box_version = "20190426.0.0"
  config.disksize.size = '1000GB'

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./vm_folder", "/vagrant_data"

  config.vm.provider "virtualbox" do |vb|
    # Adjust this to the number of physical CPUs on your machine (not the number of threads)
    vb.cpus = 4
    # Adjust this to the maximum RAM you can give to a VM (~ your OS memory - 2GB)
    vb.memory = "30000"
    # Force the VM to pre-allocate the RAM. This guarantees the host has enough RAM.
    # If we don't do this, the VM might get aborted if it runs out of RAM.
    vb.customize ["setextradata", :id, "VBoxInternal/RamPreAlloc", "1"]
  end

  # Enable provisioning with a shell script.
  config.vm.provision "shell", inline: <<-SHELL
    screen -dm bash -c "cd /vagrant_data; sh vagrant_init_script.sh"
  SHELL
end

